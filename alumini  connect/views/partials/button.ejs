<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Interactive Button</title>
  <style>
    /* Wrapper for custom button */
    #custom-button-wrapper {
      --x: 0;
      --y: 0;
      --xp: 0;
      --yp: 0;
      --hue: calc(0 + (var(--xp) * 500));
      --bg: hsl(0 0% 10%);
      --size: 100px;
      --glow: radial-gradient(
          50% 50% at center,
          hsl(var(--hue) 80% 85%),
          hsl(var(--hue) 80% 70%),
          transparent
        )
        calc((var(--x) * 1px) - (var(--size) * 0.5))
        calc((var(--y) * 1px) - (var(--size) * 0.5)) / var(--size) var(--size) no-repeat fixed;
      height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      background-color: black;
    }

    /* Button styles */
    #custom-button-wrapper button {
      border-radius: 1rem;
      text-transform: uppercase;
      font-weight: bold;
      letter-spacing: 0.1ch;
      background: var(--bg);
      border: 4px solid transparent;
      box-shadow: 0 1px hsl(0 0% 100% / 0.15) inset;
      cursor: pointer;
      background: linear-gradient(var(--bg), var(--bg)) padding-box, var(--glow),
        linear-gradient(black, black) border-box;
      transition: background-size 0.24s;
      touch-action: none;
      position: relative;
      padding: 1rem 2rem;
    }

    /* Glow effect */
    #custom-button-wrapper button::before {
      content: "";
      position: absolute;
      inset: 0;
      background: var(--bg);
      z-index: 2;
      border-radius: 1rem;
    }

    /* Text styles */
    #custom-button-wrapper button span {
      background: var(--glow), black;
      background-clip: text;
      color: transparent;
      z-index: 2;
      position: relative;
    }

    /* Active state enlarges glow */
    #custom-button-wrapper:has(button:active) {
      --size: 300px;
    }

    /* Outer glow effect */
    #custom-button-wrapper button::after {
      content: "";
      position: absolute;
      inset: -4px;
      filter: blur(20px);
      border: 4px solid transparent;
      background: var(--glow);
      border-radius: 1rem;
    }
  </style>
</head>
<body>
  <!-- Button Wrapper -->
  <div id="custom-button-wrapper">
    <button>
      <span>Try This</span>
    </button>
  </div>

  <script>
    // Select the wrapper
    const buttonWrapper = document.querySelector('#custom-button-wrapper');

    const syncPointer = ({ clientX, clientY }) => {
      // Calculate pointer positions
      const x = clientX.toFixed(2);
      const y = clientY.toFixed(2);
      const xp = (clientX / window.innerWidth).toFixed(2);
      const yp = (clientY / window.innerHeight).toFixed(2);

      // Update CSS variables dynamically
      buttonWrapper.style.setProperty('--x', x);
      buttonWrapper.style.setProperty('--y', y);
      buttonWrapper.style.setProperty('--xp', xp);
      buttonWrapper.style.setProperty('--yp', yp);
    };

    // Pointermove event listener on the wrapper
    buttonWrapper.addEventListener('pointermove', syncPointer);
  </script>
</body>
</html>
